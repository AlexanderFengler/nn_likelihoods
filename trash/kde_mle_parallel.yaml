#model_path: '/media/data_cifs/afengler/data/kde/ddm/keras_models/dnnregressor_ddm_06_28_19_00_58_26/model_0' # path for model
model_path: '/media/data_cifs/afengler/data/kde/linear_collapse/keras_models/dnnregressor_ddm_08_08_19_19_05_39/model.h5'
ckpt_path: '/media/data_cifs/afengler/data/kde/ddm/keras_models/dnnregressor_ddm_06_28_19_00_58_26/ckpt_0_final' # path for ckpt
model_dtype: 'h5'
network_trained_on_log: True
meta_data_file_path: '/users/afengler/data/kde/ddm/train_test_data/meta_data.pickle' # path for metadata 
mle_out_path: '/media/data_cifs/afengler/tmp/' # path for the out files for the mle runs
cuda_on: True # do we use gpus?
n_runs: 1 # number of mles to compute in main loop
n_samples: 2500 # samples by run
n_workers: 1 # number of workers to choose for parallel mle
save_mle_out: True # save mle output file?
boundary: bf.linear_collapse # boundary to choose for model
boundary_multiplicative: False # is boundary multiplicative ?
param_names: ['v', 'a', 'w', 'node', 'theta'] # names of parameters under consideration
param_bounds: [ !!python/tuple [-1.5, 1.5], !!python/tuple [0.5, 2], !!python/tuple [0.3, 0.7], !!python/tuple [0, 0.5], !!python/tuple [0.01, 0.7] ] # list of tuples of parameter bounds
param_bounds_epsilon: [0.1, 0.1, 0.05, 0.05, 0.1]
param_varies: [1, 1, 1, 0, 0] # whether the parameter can vary across subjects
n_subjects: 2 # number of subjects under consideration
param_is_boundary_param: [0, 0, 0, 1, 1] 
de_optim_popsize: 50